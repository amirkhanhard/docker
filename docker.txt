
sudo docker ps -a // list all containers

sudo docker ps // list all active containers


sudo docker pull hello-world // pull the images from docker hub with latest version

sudo docker pull hello-world:9.0 | hello-world:linux  // pull the image with specific version from docker hub

sudo docker run hello-world // create new container from image | if not found locally then also pull and run container  |  container name

sudo docker run --name aktest ubuntu // --name mysql-older for custom container name, name must be before port and image name

sudo docker run -it --name aktest ubuntu // -it for interactive mode we go into the image interactively, used by ubuntu etc

sudo docker stop|start  cont_id, cont_name // start stop docker container with id or name

sudo docker rm cont_id, cont_name // remove docker container with id or name, we should stop the container or forcefully remove

sudo docker rm c496f23f6ff9 -f // -f forcefully remove the container



sudo docker images // list all images pulled from docker hub

sudo docker run -d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag // tag specific run docker
sudo docker run -d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:8.0

sudo docker run -d -e MYSQL_ROOT_PASSWORD=qwerty -d --name mysql-older -p8080:3306  mysql:8.0 // run container with port and custom name

sudo docker exec -it 8b5e45a7d017 mysql -uroot -p // log into terminal of the mysql

sudo docker rmi image_name or image_id // remove image using image_id or image_name | Before deleting image we need to delete container



sudo docker logs cont_id|cont_name // check logs with container id

sudo docker exec -it cont_id|cont_name /bin/bash //execute base shell command.

sudo docker exec -it cont_id|cont_name /bin/sh   //execute shell command.



sudo docker network ls // list all network

sudo docker network create  mongo-network // create custom network

sudo docker network rm network_name // remove etwork with network name



Connect mysql with phpmyadmin:-

sudo docker run -d --name mysql --network mongo-network -e MYSQL_ROOT_PASSWORD=rootpassword -e MYSQL_DATABASE=testdb -e MYSQL_USER=user -e MYSQL_PASSWORD=userpassword -v mysql_data:/var/lib/mysql -p 3307:3306 mysql:8.0

sudo docker run -d  --name phpmyadmin --network mongo-network -e PMA_HOST=mysql -e PMA_PORT=3306 -e MYSQL_ROOT_PASSWORD=rootpassword -p 8080:80 phpmyadmin:5.2.2

sudo docker exec -it 8b5e45a7d017 mysql -uroot -p



sudo docker run -d \
-p27017:27017 \
--name mongo \
--network  mongo-network \
-e MONGO_INITDB_ROOT_USERNAME=admin \
-e MONGO_INITDB_ROOT_PASSWORD=qwerty \
mongo

sudo docker run -d \
-p8081:8081 \
--name mongo-express \
--network  mongo-network \
-e ME_CONFIG_BASICAUTH_USERNAME=admin \
-e ME_CONFIG_BASICAUTH_PASSWORD=admin123 \
-e ME_CONFIG_MONGODB_URL="mongodb://admin:qwerty@mongo:27017" \
mongo-express



docker compose -f mongodb.yaml up -d 
docker compose -f mongodb.yaml down

mongodb.yaml
version: '3.8'

services:
  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: qwerty
    networks:
      - mongo-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123  # Optional: Add this for UI login
      ME_CONFIG_MONGODB_URL: mongodb://admin:qwerty@mongo:27017/
    depends_on:
      - mongo
    networks:
      - mongo-network
